    def _create_users_tab(self):
        """إنشاء تبويب إدارة المستخدمين"""
        users_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(users_frame, text="إدارة المستخدمين")

        # إطار العنوان
        title_frame = tk.Frame(users_frame, bg=self.COLORS["surface"], padx=20, pady=15)
        title_frame.pack(fill=tk.X, pady=(0, 20))

        tk.Label(title_frame, text="إدارة المستخدمين",
                 font=self.FONTS["large_title"],
                 bg=self.COLORS["surface"],
                 fg=self.COLORS["dark"]).pack()

        # إطار الأزرار
        buttons_frame = tk.Frame(users_frame, bg=self.COLORS["background"])
        buttons_frame.pack(pady=20)

        open_users_btn = tk.Button(
            buttons_frame,
            text="فتح نافذة إدارة المستخدمين",
            font=self.FONTS["text_bold"],
            bg=self.COLORS["primary"],
            fg="white",
            padx=30, pady=15,
            bd=0, relief=tk.FLAT,
            cursor="hand2",
            command=self._open_user_management
        )
        open_users_btn.pack()

        # إطار المعلومات
        info_frame = tk.Frame(users_frame, bg=self.COLORS["surface"], padx=20, pady=20)
        info_frame.pack(fill=tk.X, padx=50, pady=20)

        info_text = """من هنا يمكنك:
        • إضافة مستخدمين جدد للنظام
        • تعديل بيانات المستخدمين الحاليين
        • تفعيل أو تعطيل حسابات المستخدمين
        • إدارة صلاحيات المستخدمين
        • حذف المستخدمين غير النشطين"""

        tk.Label(info_frame, text=info_text,
                 font=self.FONTS["text"],
                 bg=self.COLORS["surface"],
                 fg=self.COLORS["dark"],
                 justify=tk.RIGHT).pack(pady=10)

    def _create_settings_tab(self):
        """إنشاء تبويب الإعدادات بتصميم محسن"""
        settings_frame = tk.Frame(self.tab_control, bg=self.COLORS["background"])
        self.tab_control.add(settings_frame, text="الإعدادات")

        # شريط العنوان
        header_frame = tk.Frame(settings_frame, bg="#1E3A5F", height=80)
        header_frame.pack(fill=tk.X, padx=10, pady=10)
        header_frame.pack_propagate(False)

        title_label = tk.Label(
            header_frame,
            text="إعدادات النظام",
            font=self.FONTS["large_title"],
            bg="#1E3A5F",
            fg="white"
        )
        title_label.pack(expand=True)

        # إطار المحتوى الرئيسي
        main_content = tk.Frame(settings_frame, bg=self.COLORS["background"])
        main_content.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # قسم النسخ الاحتياطي
        backup_section = tk.Frame(main_content, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        backup_section.pack(fill=tk.X, pady=(0, 20))

        # عنوان قسم النسخ الاحتياطي
        backup_header = tk.Frame(backup_section, bg="#2E7D32", height=50)
        backup_header.pack(fill=tk.X)
        backup_header.pack_propagate(False)

        tk.Label(
            backup_header,
            text="إدارة النسخ الاحتياطية",
            font=("Tajawal", 18, "bold"),
            bg="#2E7D32",
            fg="white"
        ).pack(expand=True)

        # محتوى قسم النسخ الاحتياطي
        backup_content = tk.Frame(backup_section, bg=self.COLORS["surface"], padx=30, pady=20)
        backup_content.pack(fill=tk.X)

        tk.Label(
            backup_content,
            text="إنشاء واستعراض النسخ الاحتياطية للنظام",
            font=("Tajawal", 14),
            bg=self.COLORS["surface"],
            fg="#666"
        ).pack(anchor=tk.W, pady=(0, 15))

        # أزرار النسخ الاحتياطي
        backup_buttons_frame = tk.Frame(backup_content, bg=self.COLORS["surface"])
        backup_buttons_frame.pack(fill=tk.X)

        # زر إنشاء نسخة احتياطية
        create_backup_btn = tk.Button(
            backup_buttons_frame,
            text="💾 إنشاء نسخة احتياطية",
            font=("Tajawal", 14, "bold"),
            bg="#2E7D32",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._create_automatic_backup
        )
        create_backup_btn.pack(side=tk.LEFT, padx=(0, 10))

        # تأثيرات hover
        create_backup_btn.bind("<Enter>", lambda e: create_backup_btn.config(bg="#1B5E20"))
        create_backup_btn.bind("<Leave>", lambda e: create_backup_btn.config(bg="#2E7D32"))

        # زر استعراض النسخ الاحتياطية
        restore_backup_btn = tk.Button(
            backup_buttons_frame,
            text="📂 استعراض النسخ الاحتياطية",
            font=("Tajawal", 14, "bold"),
            bg="#1976D2",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._browse_backups
        )
        restore_backup_btn.pack(side=tk.LEFT)

        # تأثيرات hover
        restore_backup_btn.bind("<Enter>", lambda e: restore_backup_btn.config(bg="#0D47A1"))
        restore_backup_btn.bind("<Leave>", lambda e: restore_backup_btn.config(bg="#1976D2"))

        # خط فاصل
        separator = tk.Frame(main_content, bg=self.COLORS["border"], height=2)
        separator.pack(fill=tk.X, pady=20)

        # قسم إعادة التعيين
        reset_section = tk.Frame(main_content, bg=self.COLORS["surface"], relief=tk.RIDGE, bd=2)
        reset_section.pack(fill=tk.X)

        # عنوان قسم إعادة التعيين
        reset_header = tk.Frame(reset_section, bg="#D32F2F", height=50)
        reset_header.pack(fill=tk.X)
        reset_header.pack_propagate(False)

        tk.Label(
            reset_header,
            text="إعادة تعيين النظام",
            font=("Tajawal", 18, "bold"),
            bg="#D32F2F",
            fg="white"
        ).pack(expand=True)

        # محتوى قسم إعادة التعيين
        reset_content = tk.Frame(reset_section, bg=self.COLORS["surface"], padx=30, pady=20)
        reset_content.pack(fill=tk.X)

        tk.Label(
            reset_content,
            text="⚠️ تحذير: سيتم حذف جميع البيانات نهائياً",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"],
            fg="#D32F2F"
        ).pack(anchor=tk.W, pady=(0, 15))

        # زر إعادة التعيين
        reset_btn = tk.Button(
            reset_content,
            text="🗑️ إعادة تعيين النظام",
            font=("Tajawal", 14, "bold"),
            bg="#D32F2F",
            fg="white",
            padx=30,
            pady=12,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=self._reset_system
        )
        reset_btn.pack()

        # تأثيرات hover
        reset_btn.bind("<Enter>", lambda e: reset_btn.config(bg="#B71C1C"))
        reset_btn.bind("<Leave>", lambda e: reset_btn.config(bg="#D32F2F"))

    def _create_automatic_backup(self):
        """إنشاء نسخة احتياطية تلقائية في مجلد Backup"""
        import shutil
        import os

        try:
            # إنشاء مجلد Backup إذا لم يكن موجوداً
            backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Backup")
            if not os.path.exists(backup_dir):
                os.makedirs(backup_dir)

            # اسم ملف النسخة الاحتياطية مع التاريخ والوقت
            backup_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
            backup_path = os.path.join(backup_dir, backup_filename)

            # إغلاق المعاملات المعلقة
            self.db_conn.commit()

            # نسخ قاعدة البيانات - استخدام الاسم الصحيح
            shutil.copy2("training_system.db", backup_path)

            # إنشاء ملف معلومات
            info_filename = f"backup_{datetime.now().strftime('%Y%m%d_%H%M%S')}_info.txt"
            info_path = os.path.join(backup_dir, info_filename)

            with open(info_path, 'w', encoding='utf-8') as f:
                f.write("معلومات النسخة الاحتياطية\n")
                f.write("=" * 40 + "\n")
                f.write(f"التاريخ: {datetime.now().strftime('%Y-%m-%d')}\n")
                f.write(f"الوقت: {datetime.now().strftime('%H:%M:%S')}\n")
                f.write(f"المستخدم: {self.current_user['full_name'] if self.current_user else 'غير محدد'}\n")
                f.write(f"حجم الملف: {os.path.getsize(backup_path) / (1024 * 1024):.2f} MB\n")

            # حساب عدد النسخ الاحتياطية
            backup_count = len([f for f in os.listdir(backup_dir) if f.endswith('.db')])

            messagebox.showinfo(
                "نجاح",
                f"تم إنشاء النسخة الاحتياطية بنجاح\n\n"
                f"المسار: Backup\\{backup_filename}\n"
                f"عدد النسخ الاحتياطية: {backup_count}"
            )

            # اختياري: حذف النسخ القديمة (الاحتفاظ بآخر 10 نسخ فقط)
            self._cleanup_old_backups(backup_dir, keep_count=10)

        except Exception as e:
            messagebox.showerror("خطأ", f"فشل إنشاء النسخة الاحتياطية:\n{str(e)}")

    def _browse_backups(self):
        """استعراض واستعادة النسخ الاحتياطية من مجلد Backup"""
        import os

        # التحقق من وجود مجلد النسخ الاحتياطي
        backup_dir = os.path.join(os.path.dirname(os.path.abspath(__file__)), "Backup")
        if not os.path.exists(backup_dir):
            messagebox.showwarning("تنبيه", "لا يوجد مجلد للنسخ الاحتياطية")
            return

        # الحصول على قائمة النسخ الاحتياطية
        backup_files = [f for f in os.listdir(backup_dir) if f.endswith('.db') and f.startswith('backup_')]

        if not backup_files:
            messagebox.showwarning("تنبيه", "لا توجد نسخ احتياطية")
            return

        # ترتيب النسخ حسب التاريخ (الأحدث أولاً)
        backup_files.sort(reverse=True)

        # نافذة استعراض النسخ الاحتياطية
        browse_window = tk.Toplevel(self)
        browse_window.title("استعراض النسخ الاحتياطية")
        browse_window.geometry("600x500")
        browse_window.configure(bg=self.COLORS["background"])
        browse_window.transient(self)
        browse_window.grab_set()

        # توسيط النافذة
        browse_window.update_idletasks()
        x = (browse_window.winfo_screenwidth() - 600) // 2
        y = (browse_window.winfo_screenheight() - 500) // 2
        browse_window.geometry(f"600x500+{x}+{y}")

        # شريط العنوان
        header_frame = tk.Frame(browse_window, bg="#1976D2", height=60)
        header_frame.pack(fill=tk.X)
        header_frame.pack_propagate(False)

        tk.Label(
            header_frame,
            text="النسخ الاحتياطية المتوفرة",
            font=("Tajawal", 18, "bold"),
            bg="#1976D2",
            fg="white"
        ).pack(expand=True)

        # إطار القائمة
        list_frame = tk.Frame(browse_window, bg=self.COLORS["surface"], bd=2, relief=tk.RIDGE)
        list_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=20)

        # شريط التمرير
        scrollbar = tk.Scrollbar(list_frame)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)

        # قائمة النسخ
        listbox = tk.Listbox(
            list_frame,
            font=("Tajawal", 12),
            yscrollcommand=scrollbar.set,
            selectbackground="#1976D2",
            selectforeground="white",
            height=12
        )
        listbox.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.config(command=listbox.yview)

        # إضافة النسخ إلى القائمة
        for backup_file in backup_files:
            # استخراج التاريخ والوقت من اسم الملف
            try:
                date_time = backup_file.replace('backup_', '').replace('.db', '')
                date_part = date_time[:8]
                time_part = date_time[9:]

                formatted_date = f"{date_part[:4]}-{date_part[4:6]}-{date_part[6:8]}"
                formatted_time = f"{time_part[:2]}:{time_part[2:4]}:{time_part[4:6]}"

                # الحصول على حجم الملف
                file_path = os.path.join(backup_dir, backup_file)
                file_size = os.path.getsize(file_path) / (1024 * 1024)

                display_text = f"{formatted_date} - {formatted_time} ({file_size:.2f} MB)"
            except:
                display_text = backup_file

            listbox.insert(tk.END, display_text)

        # إطار الأزرار
        buttons_frame = tk.Frame(browse_window, bg=self.COLORS["background"])
        buttons_frame.pack(fill=tk.X, pady=10)

        def restore_selected():
            selection = listbox.curselection()
            if not selection:
                messagebox.showwarning("تنبيه", "يرجى اختيار نسخة احتياطية")
                return

            selected_file = backup_files[selection[0]]
            backup_path = os.path.join(backup_dir, selected_file)

            if messagebox.askyesno(
                    "تأكيد الاستعادة",
                    "سيتم استبدال جميع البيانات الحالية\n\n"
                    "هل تريد المتابعة؟",
                    icon="warning"
            ):
                import shutil
                import sys

                try:
                    # إغلاق الاتصال بقاعدة البيانات
                    self.db_conn.close()

                    # نسخ احتياطي مؤقت للبيانات الحالية
                    temp_backup = f"temp_{datetime.now().strftime('%Y%m%d_%H%M%S')}.db"
                    shutil.copy2("training_system.db", temp_backup)

                    # استعادة النسخة الاحتياطية
                    shutil.copy2(backup_path, "training_system.db")

                    # حذف النسخة المؤقتة
                    try:
                        os.remove(temp_backup)
                    except:
                        pass

                    messagebox.showinfo(
                        "نجاح",
                        "تمت استعادة النسخة الاحتياطية بنجاح\n\n"
                        "سيتم إعادة تشغيل البرنامج"
                    )

                    browse_window.destroy()

                    # إعادة تشغيل البرنامج
                    python = sys.executable
                    os.execl(python, python, *sys.argv)

                except Exception as e:
                    messagebox.showerror("خطأ", f"فشلت الاستعادة:\n{str(e)}")
                    # محاولة إعادة الاتصال
                    try:
                        self.db_conn = sqlite3.connect("training_system.db")
                    except:
                        pass

        # زر الاستعادة
        restore_btn = tk.Button(
            buttons_frame,
            text="استعادة النسخة المحددة",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["success"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=restore_selected
        )
        restore_btn.pack(side=tk.LEFT, padx=20)

        # زر الإغلاق
        close_btn = tk.Button(
            buttons_frame,
            text="إغلاق",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["dark"],
            fg="white",
            padx=30,
            pady=10,
            bd=0,
            relief=tk.FLAT,
            cursor="hand2",
            command=browse_window.destroy
        )
        close_btn.pack(side=tk.RIGHT, padx=20)

    def _cleanup_old_backups(self, backup_dir, keep_count=10):
        """حذف النسخ الاحتياطية القديمة والاحتفاظ بعدد محدد"""
        try:
            import os

            # الحصول على قائمة ملفات النسخ الاحتياطية
            backup_files = []
            for file in os.listdir(backup_dir):
                if file.endswith('.db') and file.startswith('backup_'):
                    file_path = os.path.join(backup_dir, file)
                    backup_files.append((file_path, os.path.getmtime(file_path)))

            # ترتيب حسب تاريخ التعديل (الأحدث أولاً)
            backup_files.sort(key=lambda x: x[1], reverse=True)

            # حذف النسخ القديمة الزائدة
            for file_path, _ in backup_files[keep_count:]:
                try:
                    os.remove(file_path)
                    # حذف ملف المعلومات المرتبط إن وجد
                    info_path = file_path.replace('.db', '_info.txt')
                    if os.path.exists(info_path):
                        os.remove(info_path)
                except:
                    pass

        except Exception as e:
            print(f"خطأ في تنظيف النسخ القديمة: {e}")

    def _reset_system(self):
        """إعادة تعيين النظام بالكامل - حذف جميع البيانات"""
        # تحذير أول
        if not messagebox.askyesno(
                "تحذير",
                "هل أنت متأكد من رغبتك في إعادة تعيين النظام؟\n\n"
                "سيتم حذف جميع البيانات نهائياً!",
                icon="warning"
        ):
            return

        # تحذير ثاني
        if not messagebox.askyesno(
                "تحذير نهائي",
                "هذا آخر تحذير!\n\n"
                "سيتم حذف:\n"
                "• جميع المدرسين\n"
                "• جميع البرامج والجداول\n"
                "• جميع مسميات الدورات\n"
                "• جميع هيئة التدريس\n\n"
                "هل أنت متأكد تماماً؟",
                icon="warning"
        ):
            return

        # طلب كلمة تأكيد
        confirm_dialog = tk.Toplevel(self)
        confirm_dialog.title("تأكيد إعادة التعيين")
        confirm_dialog.geometry("400x200")
        confirm_dialog.configure(bg=self.COLORS["surface"])
        confirm_dialog.transient(self)
        confirm_dialog.grab_set()

        # توسيط النافذة
        confirm_dialog.update_idletasks()
        x = (confirm_dialog.winfo_screenwidth() - 400) // 2
        y = (confirm_dialog.winfo_screenheight() - 200) // 2
        confirm_dialog.geometry(f"400x200+{x}+{y}")

        # المحتوى
        content = tk.Frame(confirm_dialog, bg=self.COLORS["surface"], padx=20, pady=20)
        content.pack(fill=tk.BOTH, expand=True)

        tk.Label(
            content,
            text="اكتب 'حذف الكل' للتأكيد:",
            font=("Tajawal", 14, "bold"),
            bg=self.COLORS["surface"]
        ).pack(pady=(0, 10))

        confirm_entry = tk.Entry(
            content,
            font=("Tajawal", 14),
            width=30
        )
        confirm_entry.pack(pady=10)
        confirm_entry.focus()

        result = {"confirmed": False}

        def check_confirmation():
            if confirm_entry.get() == "حذف الكل":
                result["confirmed"] = True
                confirm_dialog.destroy()
            else:
                messagebox.showerror("خطأ", "كلمة التأكيد غير صحيحة")
                confirm_entry.delete(0, tk.END)

        tk.Button(
            content,
            text="تأكيد",
            font=("Tajawal", 12, "bold"),
            bg=self.COLORS["danger"],
            fg="white",
            padx=20,
            pady=8,
            bd=0,
            relief=tk.FLAT,
            command=check_confirmation
        ).pack(pady=10)

        confirm_dialog.wait_window()

        if not result["confirmed"]:
            return

        # تنفيذ إعادة التعيين
        try:
            cursor = self.db_conn.cursor()

            # حذف جميع البيانات من جميع الجداول
            tables_to_clear = [
                "teachers",
                "teacher_courses",
                "training_programs",
                "program_subjects",
                "program_schedule",
                "course_names",
                "course_teacher_paths"
            ]

            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM {table}")

            # إعادة تعيين عدادات AUTO_INCREMENT
            for table in tables_to_clear:
                cursor.execute(f"DELETE FROM sqlite_sequence WHERE name='{table}'")

            self.db_conn.commit()

            messagebox.showinfo(
                "تم",
                "تمت إعادة تعيين النظام بنجاح\n\n"
                "جميع البيانات تم حذفها"
            )

            # تحديث جميع الواجهات
            if hasattr(self, '_load_teachers'):
                self._load_teachers()
            if hasattr(self, '_load_training_programs'):
                self._load_training_programs()

        except Exception as e:
            self.db_conn.rollback()
            messagebox.showerror("خطأ", f"فشلت عملية إعادة التعيين:\n{str(e)}")

    def _create_database_tables(self):
        """إنشاء جداول قاعدة البيانات"""
        try:
            cursor = self.db_conn.cursor()

            # جدول المدرسين
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS teachers (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT NOT NULL,
                    rank TEXT,
                    id_number TEXT UNIQUE NOT NULL,
                    phone TEXT,
                    workplace TEXT,
                    qualification TEXT,
                    category TEXT,
                    created_date TEXT
                )
            """)

            # جدول الدورات للمدرسين
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS teacher_courses (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    teacher_id INTEGER,
                    course_name TEXT,
                    course_date TEXT,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE
                )
            """)

            # جدول البرامج التدريبية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS training_programs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_number TEXT UNIQUE NOT NULL,
                    course_name_id INTEGER,
                    start_date TEXT,
                    end_date TEXT,
                    category TEXT,
                    created_date TEXT,
                    FOREIGN KEY (course_name_id) REFERENCES course_names(id),
                    UNIQUE(program_number)
                )
            """)

            # جدول مواد البرامج التدريبية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS program_subjects (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_id INTEGER,
                    subject_name TEXT NOT NULL,
                    subject_order INTEGER,
                    FOREIGN KEY (program_id) REFERENCES training_programs(id) ON DELETE CASCADE
                )
            """)

            # جدول مسميات الدورات
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS course_names (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT UNIQUE NOT NULL,
                    description TEXT,
                    created_date TEXT,
                    is_active INTEGER DEFAULT 1
                )
            """)

            # جدول مسارات مدرسي الدورات
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS course_teacher_paths (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    course_name TEXT NOT NULL,
                    teacher_id INTEGER NOT NULL,
                    is_responsible INTEGER DEFAULT 0,
                    created_date TEXT,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE CASCADE,
                    UNIQUE(course_name, teacher_id)
                )
            """)

            # إنشاء جدول الجدول الدراسي إذا لم يكن موجوداً
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS program_schedule (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    program_id INTEGER NOT NULL,
                    week_number INTEGER NOT NULL DEFAULT 1,
                    day_of_week INTEGER NOT NULL,
                    period_number INTEGER NOT NULL,
                    start_time TEXT NOT NULL,
                    end_time TEXT NOT NULL,
                    subject_id INTEGER,
                    teacher_id INTEGER,
                    is_break INTEGER DEFAULT 0,
                    break_name TEXT,
                    location TEXT DEFAULT 'المقر التدريبي',
                    is_special_week INTEGER DEFAULT 0,
                    special_week_name TEXT,
                    teacher_name TEXT,
                    FOREIGN KEY (program_id) REFERENCES training_programs(id) ON DELETE CASCADE,
                    FOREIGN KEY (subject_id) REFERENCES program_subjects(id) ON DELETE SET NULL,
                    FOREIGN KEY (teacher_id) REFERENCES teachers(id) ON DELETE SET NULL,
                    UNIQUE(program_id, week_number, day_of_week, period_number)
                )
            """)

            # جدول أوقات الحصص الافتراضية
            cursor.execute("""
                CREATE TABLE IF NOT EXISTS default_periods (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    period_number INTEGER NOT NULL,
                    start_time TEXT NOT NULL,
                    end_time TEXT NOT NULL,
                    is_break INTEGER DEFAULT 0,
                    break_name TEXT
                )
            """)

            # التحقق من وجود أوقات افتراضية
            cursor.execute("SELECT COUNT(*) FROM default_periods")
            if cursor.fetchone()[0] == 0:
                # إضافة الأوقات الافتراضية فقط إذا لم تكن موجودة
                default_times = [
                    (1, "08:00", "08:45", 0, None),
                    (2, "09:15", "10:00", 0, None),
                    (3, "10:05", "10:50", 0, None),
                    (4, "10:55", "11:40", 0, None)
                ]

                for period in default_times:
                    cursor.execute("""
                        INSERT INTO default_periods (period_number, start_time, end_time, is_break, break_name)
                        VALUES (?, ?, ?, ?, ?)
                    """, period)

            # التحقق من وجود عمود category في جدول teachers
            cursor.execute("PRAGMA table_info(teachers)")
            columns = [column[1] for column in cursor.fetchall()]

            if 'category' not in columns:
                cursor.execute("ALTER TABLE teachers ADD COLUMN category TEXT")

            self.db_conn.commit()

        except Exception as e:
            print(f"خطأ في إنشاء الجداول: {str(e)}")

    def _open_user_management(self):
        """فتح نافذة إدارة المستخدمين"""
        if not self.current_user["permissions"]["is_admin"]:
            messagebox.showerror("خطأ", "ليس لديك صلاحية الوصول لإدارة المستخدمين")
            return

        UserManagement(self, self.db_conn, self.current_user, self.COLORS, self.FONTS)


if __name__ == "__main__":
    root = tk.Tk()
    LoginSystem(root)
    root.mainloop()
